pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPOSITORY = '568406210619.dkr.ecr.us-east-1.amazonaws.com'
        EB_APP_NAME = 'simple-web-app'
        EB_ENV_NAME = 'dev'
        DOCKER_IMAGE_NAME = 'simple-web-app'
        AWS_ACCOUNT_ID = '568406210619'
        // AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        // AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {
        stage('Fetch Code') {
            steps {
                echo 'Fetching code from GitHub repository...'
                git branch: 'main', url: 'https://github.com/worachai3/simple-python-webapp.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                withVault(configuration: [timeout: 60, vaultCredentialId: 'vault-jenkins-role', vaultUrl: 'http://172.31.92.149:8200'], vaultSecrets: [[path: 'secret/aws', secretValues: [[envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'AWS_ACCESS_KEY_ID'], [envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'AWS_SECRET_ACCESS_KEY']]]]) {
                    script {
                        sh """ export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"""
                        sh """ export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"""
                        sh """aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}"""
                        if (!fileExists("${DOCKER_IMAGE_NAME}")) {
                            sh 'echo Build Docker image...'
                            sh "docker build -t ${DOCKER_IMAGE_NAME} ."
                        }
                    }
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                echo 'Pushing Docker image to ECR...'
                script {
                    sh 'echo Pushing Docker image to ECR...'
                    sh """docker tag ${DOCKER_IMAGE_NAME} ${ECR_REPOSITORY}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"""
                    sh """docker tag ${DOCKER_IMAGE_NAME} ${ECR_REPOSITORY}/${DOCKER_IMAGE_NAME}:latest"""
                    sh """docker push ${ECR_REPOSITORY}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}"""
                    sh """docker push ${ECR_REPOSITORY}/${DOCKER_IMAGE_NAME}:latest"""
                }
            }
        }

        stage('Deploy') {
                steps {
                    withVault(configuration: [timeout: 60, vaultCredentialId: 'vault-jenkins-role', vaultUrl: 'http://172.31.92.149:8200'], vaultSecrets: [[path: 'secret/aws', secretValues: [[envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'AWS_ACCESS_KEY_ID'], [envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'AWS_SECRET_ACCESS_KEY']]]]) {
                        script {
                            sh """ export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"""
                            sh """ export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"""
                            echo 'Deploying to ec2...'
                            sh "terraform init"
                            sh "echo Terminate any running instances..."
                            sh "terraform destroy -auto-approve -var 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -var 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -var 'AWS_REGION=${AWS_REGION}' -var 'ECR_REPOSITORY=${ECR_REPOSITORY}'"
                            sh "echo Deploying new instances..."
                            sh "terraform apply -auto-approve -var 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' -var 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' -var 'AWS_REGION=${AWS_REGION}' -var 'ECR_REPOSITORY=${ECR_REPOSITORY}'"
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            // Notify success
            echo 'Pipeline succeeded!'
        }
        failure {
            // Notify failure
            echo 'Pipeline failed!'
        }
    }
}

